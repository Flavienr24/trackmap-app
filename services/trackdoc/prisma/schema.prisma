// Prisma schema file - defines database structure and relationships
// Generates TypeScript client for type-safe database operations

generator client {
  provider = "prisma-client-js"
}

// SQLite database configuration for development
// Uses DATABASE_URL environment variable for connection
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Product model - represents a trackable application/website
// Simplified model without instances - each product is standalone
model Product {
  id          String    @id @default(cuid()) // Unique identifier using cuid
  name        String    @unique // Product name (required and unique)
  url         String    // Product URL (required)
  description String?   // Optional product description
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Related entities
  pages           Page[]           // Product pages
  properties      Property[]       // Shared property definitions
  suggestedValues SuggestedValue[] // Shared suggested values

  @@map("products")
}


// Page model - represents trackable pages within a product
// Simplified model with single URL per page
model Page {
  id        String   @id @default(cuid())
  productId String   @map("product_id") // Foreign key to Product
  name      String   // Page name (e.g., "Homepage", "Checkout")
  slug      String   // URL-friendly slug (e.g., "homepage")
  url       String   // Single URL for the page
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  events    Event[]  // Tracking events on this page

  @@unique([productId, slug]) // Unique slug per product
  @@index([productId])
  @@map("pages")
}

// Event model - represents GA4 tracking events on pages
// Tracks implementation status and contains variable definitions
model Event {
  id        String      @id @default(cuid())
  pageId    String      @map("page_id") // Foreign key to Page
  name      String      // Event name (e.g., "purchase", "page_view")
  status    String @default("TO_IMPLEMENT") // Implementation status
  testDate  DateTime?   @map("test_date") // Date when event was tested
  properties String     // Event properties as JSON string
  screenshots String?   // Screenshot file paths as JSON array - can be null, empty array, or contain multiple paths
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  // Relationships
  page      Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  comments  Comment[]   // Comments about this event
  history   EventHistory[] // Change history for this event

  @@index([pageId])
  @@index([status])
  @@index([updatedAt])
  @@map("events")
}

// Property model - defines reusable property schemas for events
// Provides type information and description for consistent property usage
model Property {
  id          String      @id @default(cuid())
  productId   String      @map("product_id") // Foreign key to Product
  name        String      // Property name (e.g., "page_name", "user_id")
  type        String       // Data type (STRING, NUMBER, BOOLEAN, etc.)
  description String?     // Optional description of property usage
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relationships
  product             Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  propertyValues      PropertyValue[] // Associations with suggested values

  @@map("properties")
}

// SuggestedValue model - stores reusable values for properties
// Can be static values or contextual placeholders (e.g., $page-name)
model SuggestedValue {
  id            String    @id @default(cuid())
  productId     String    @map("product_id") // Foreign key to Product
  value         String    // The suggested value (static or contextual)
  isContextual  Boolean   @map("is_contextual") @default(false) // True for $property-name format
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relationships
  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  propertyValues    PropertyValue[] // Associations with properties

  @@map("suggested_values")
}

// PropertyValue model - many-to-many relationship between Properties and SuggestedValues
// Associates which suggested values are appropriate for which properties
model PropertyValue {
  propertyId       String @map("property_id") // Foreign key to Property
  suggestedValueId String @map("suggested_value_id") // Foreign key to SuggestedValue

  // Relationships
  property        Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  suggestedValue  SuggestedValue @relation(fields: [suggestedValueId], references: [id], onDelete: Cascade)

  @@id([propertyId, suggestedValueId]) // Composite primary key
  @@map("property_values")
}

// Comment model - stores user comments on events
// Separate from history to distinguish between comments and change logs
model Comment {
  id        String   @id @default(cuid())
  eventId   String   @map("event_id") // Foreign key to Event
  content   String   // Comment text content
  author    String?  // Optional author name/ID
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// EventHistory model - tracks changes to event fields over time
// Separate from comments to maintain audit trail of modifications
model EventHistory {
  id        String   @id @default(cuid())
  eventId   String   @map("event_id") // Foreign key to Event
  field     String   // Field name that was changed
  oldValue  String?  @map("old_value") // Previous value (JSON string if complex)
  newValue  String?  @map("new_value") // New value (JSON string if complex)
  author    String?  // Optional author of the change
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_history")
}

// SQLite doesn't support enums, so we use string constraints
// Event status values: TO_IMPLEMENT, TO_TEST, ERROR, VALIDATED
// Property type values: STRING, NUMBER, BOOLEAN, ARRAY, OBJECT

// Removed models: Instance (replaced by separate Products)